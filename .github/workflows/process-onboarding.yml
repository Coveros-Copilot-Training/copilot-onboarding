name: Process Onboarding Request

on:
  issues:
    types: [opened, edited]

permissions: write-all

jobs:
  validate-and-onboard:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'onboarding')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Parse issue form data
        id: parse
        uses: peter-murray/issue-forms-body-parser@v4.2.1
        with:
          issue_id: ${{ github.event.issue.number }}
          generate_summary: true

      - name: Immediately redact access code from issue
        uses: actions/github-script@v7
        with:
          script: |
            // Get the current issue body
            const issue = await github.rest.issues.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });

            // Redact the access code from the issue body
            let body = issue.data.body;
            body = body.replace(/### Access Code\n\n.*/gm, '### Access Code\n\n[------]');

            // Update the issue to remove the access code
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });

      - name: Rate limit check
        id: rate_limit
        uses: actions/github-script@v7
        with:
          script: |
            const creator = context.payload.issue.user.login;
            const recentIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              creator: creator,
              state: 'all',
              since: new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString(),
              labels: 'onboarding'
            });
            // Allow max 5 attempts per 24 hours
            if (recentIssues.data.length > 5) {
              throw new Error('Rate limit exceeded. Too many onboarding attempts.');
            }

            return true;

      - name: Validate access code
        id: validate
        env:
          ACCESS_CODE: ${{ secrets.ONBOARDING_ACCESS_CODE }}
          SUBMITTED_CODE: ${{ steps.parse.outputs.payload.Access_Code }}
          parsed_data: ${{ steps.parse.outputs.payload }}
        run: |
          echo "$parsed_data"
          echo "Submitted code: $SUBMITTED_CODE"
          if [ "$ACCESS_CODE" != "$SUBMITTED_CODE" ]; then
            echo "valid=false" >> $GITHUB_OUTPUT
            echo "Access code is invalid"
          else
            echo "valid=true" >> $GITHUB_OUTPUT
            echo "Access code is valid"
          fi

      - name: Add user to organization
        if: steps.validate.outputs.valid == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.ORG_ADMIN_TOKEN }}
          script: |
            try {
              // Add user to organization
              await github.rest.orgs.addOrUpdateMembership({
                org: context.repo.owner,
                username: context.payload.issue.user.login,
                role: 'member'
              });
              
            } catch (error) {
              console.error(`Failed to add user to organization: ${error.message}`);
            }

      - name: Complete onboarding process
        if: always() && !contains(steps.*.outcome, 'cancelled')
        uses: actions/github-script@v7
        with:
          script: |
            // Comment on issue with generic message
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Thank you for your onboarding request. Your submission has been processed.\n\nIf your request was approved, you will receive an organization invitation email shortly. Please check your email associated with your GitHub account.`
            });

            // Close issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed'
            });

            // Add completion label
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['onboarding-complete']
            });

      - name: Handle rate limit failure
        if: failure() && steps.rate_limit.outcome == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `Your onboarding request could not be processed due to too many attempts. Please try again later or contact your Coveros representative.`
            });

            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              state: 'closed'
            });

            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              labels: ['onboarding-complete']
            });
